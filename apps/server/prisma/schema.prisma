generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum CandidateStatus {
  HIRED
  PENDING
  REJECTED
  IN_PROGRESS
  SHORTLISTED
  VIOLATED
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InterviewMode {
  IN_PERSON
  VIRTUAL
  PHONE
}

enum InterviewResult {
  PASSED
  FAILED
  ON_HOLD
  NOT_EVALUATED
}

// Job Model
model Job {
  id          String  @id @default(uuid())
  title       String
  description String
  location    String?
  salary      Float?
  status      String  @default("OPEN") // Status: OPEN, CLOSED, etc.

  candidates Candidate[] // Candidates applying for the job
  interviews Interview[] // Interviews related to the job
  questions  JobQuestion[] // One-to-Many: Job â†’ Questions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Candidate Model
model Candidate {
  id         String          @id @default(uuid())
  firstName  String
  lastName   String
  email      String          @unique
  phone      String
  dob        DateTime
  address    String
  status     CandidateStatus @default(PENDING)
  password   String
  resume     String? // Store resume URL or file reference
  experience Int
  testLink   String
  testResult TestResult?

  jobId String? // Candidate applied for a job
  job   Job?    @relation(fields: [jobId], references: [id])

  interviews Interview[] // Relationship with Interview table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Interview Model
model Interview {
  id              String          @id @default(uuid())
  candidateId     String
  jobId           String
  scheduledAt     DateTime
  status          InterviewStatus @default(SCHEDULED) // Uses enum
  mode            InterviewMode
  location        String?
  duration        Int?
  feedback        String?
  score           Float?
  result          InterviewResult @default(NOT_EVALUATED)
  rescheduleCount Int             @default(0)
  rescheduledAt   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  candidate Candidate @relation(fields: [candidateId], references: [id])
  job       Job       @relation(fields: [jobId], references: [id])
}

// Job Question Model (Now belongs to Job instead of Interview)
model JobQuestion {
  id            String @id @default(uuid())
  jobId         String
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // Store the correct option (e.g., "A", "B", "C", or "D")

  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id])
}

// Test Result Model
model TestResult {
  id          String    @id @default(uuid())
  candidateId String    @unique
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  score       Int
  feedback    String?
  violations  Boolean   @default(false)

  createdAt DateTime @default(now())
}

// HR User Model
model HRUser {
  id       String @id @default(uuid())
  email    String @unique
  password String // Hashed password
}
